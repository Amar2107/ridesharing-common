/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.prac.ride.entity.ride;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Ride extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8676586058482878558L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Ride\",\"namespace\":\"com.prac.ride.entity.ride\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"passengerId\",\"type\":\"long\"},{\"name\":\"driverId\",\"type\":\"long\"},{\"name\":\"pickupLocation\",\"type\":\"string\"},{\"name\":\"dropOffLocation\",\"type\":\"string\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"RideStatus\",\"symbols\":[\"REQUESTED\",\"ASSIGNED\",\"ACCEPTED\",\"IN_PROGRESS\",\"COMPLETED\",\"CANCELED\"]}},{\"name\":\"requestTime\",\"type\":\"string\"},{\"name\":\"startTime\",\"type\":\"string\"},{\"name\":\"endTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Ride> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Ride> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Ride> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Ride> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Ride> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Ride to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Ride from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Ride instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Ride fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private long passengerId;
  private long driverId;
  private java.lang.CharSequence pickupLocation;
  private java.lang.CharSequence dropOffLocation;
  private com.prac.ride.entity.ride.RideStatus status;
  private java.lang.CharSequence requestTime;
  private java.lang.CharSequence startTime;
  private java.lang.CharSequence endTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Ride() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param passengerId The new value for passengerId
   * @param driverId The new value for driverId
   * @param pickupLocation The new value for pickupLocation
   * @param dropOffLocation The new value for dropOffLocation
   * @param status The new value for status
   * @param requestTime The new value for requestTime
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   */
  public Ride(java.lang.Long id, java.lang.Long passengerId, java.lang.Long driverId, java.lang.CharSequence pickupLocation, java.lang.CharSequence dropOffLocation, com.prac.ride.entity.ride.RideStatus status, java.lang.CharSequence requestTime, java.lang.CharSequence startTime, java.lang.CharSequence endTime) {
    this.id = id;
    this.passengerId = passengerId;
    this.driverId = driverId;
    this.pickupLocation = pickupLocation;
    this.dropOffLocation = dropOffLocation;
    this.status = status;
    this.requestTime = requestTime;
    this.startTime = startTime;
    this.endTime = endTime;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return passengerId;
    case 2: return driverId;
    case 3: return pickupLocation;
    case 4: return dropOffLocation;
    case 5: return status;
    case 6: return requestTime;
    case 7: return startTime;
    case 8: return endTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: passengerId = (java.lang.Long)value$; break;
    case 2: driverId = (java.lang.Long)value$; break;
    case 3: pickupLocation = (java.lang.CharSequence)value$; break;
    case 4: dropOffLocation = (java.lang.CharSequence)value$; break;
    case 5: status = (com.prac.ride.entity.ride.RideStatus)value$; break;
    case 6: requestTime = (java.lang.CharSequence)value$; break;
    case 7: startTime = (java.lang.CharSequence)value$; break;
    case 8: endTime = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'passengerId' field.
   * @return The value of the 'passengerId' field.
   */
  public long getPassengerId() {
    return passengerId;
  }


  /**
   * Sets the value of the 'passengerId' field.
   * @param value the value to set.
   */
  public void setPassengerId(long value) {
    this.passengerId = value;
  }

  /**
   * Gets the value of the 'driverId' field.
   * @return The value of the 'driverId' field.
   */
  public long getDriverId() {
    return driverId;
  }


  /**
   * Sets the value of the 'driverId' field.
   * @param value the value to set.
   */
  public void setDriverId(long value) {
    this.driverId = value;
  }

  /**
   * Gets the value of the 'pickupLocation' field.
   * @return The value of the 'pickupLocation' field.
   */
  public java.lang.CharSequence getPickupLocation() {
    return pickupLocation;
  }


  /**
   * Sets the value of the 'pickupLocation' field.
   * @param value the value to set.
   */
  public void setPickupLocation(java.lang.CharSequence value) {
    this.pickupLocation = value;
  }

  /**
   * Gets the value of the 'dropOffLocation' field.
   * @return The value of the 'dropOffLocation' field.
   */
  public java.lang.CharSequence getDropOffLocation() {
    return dropOffLocation;
  }


  /**
   * Sets the value of the 'dropOffLocation' field.
   * @param value the value to set.
   */
  public void setDropOffLocation(java.lang.CharSequence value) {
    this.dropOffLocation = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.prac.ride.entity.ride.RideStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.prac.ride.entity.ride.RideStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'requestTime' field.
   * @return The value of the 'requestTime' field.
   */
  public java.lang.CharSequence getRequestTime() {
    return requestTime;
  }


  /**
   * Sets the value of the 'requestTime' field.
   * @param value the value to set.
   */
  public void setRequestTime(java.lang.CharSequence value) {
    this.requestTime = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.lang.CharSequence getStartTime() {
    return startTime;
  }


  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.CharSequence value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.lang.CharSequence getEndTime() {
    return endTime;
  }


  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.CharSequence value) {
    this.endTime = value;
  }

  /**
   * Creates a new Ride RecordBuilder.
   * @return A new Ride RecordBuilder
   */
  public static com.prac.ride.entity.ride.Ride.Builder newBuilder() {
    return new com.prac.ride.entity.ride.Ride.Builder();
  }

  /**
   * Creates a new Ride RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Ride RecordBuilder
   */
  public static com.prac.ride.entity.ride.Ride.Builder newBuilder(com.prac.ride.entity.ride.Ride.Builder other) {
    if (other == null) {
      return new com.prac.ride.entity.ride.Ride.Builder();
    } else {
      return new com.prac.ride.entity.ride.Ride.Builder(other);
    }
  }

  /**
   * Creates a new Ride RecordBuilder by copying an existing Ride instance.
   * @param other The existing instance to copy.
   * @return A new Ride RecordBuilder
   */
  public static com.prac.ride.entity.ride.Ride.Builder newBuilder(com.prac.ride.entity.ride.Ride other) {
    if (other == null) {
      return new com.prac.ride.entity.ride.Ride.Builder();
    } else {
      return new com.prac.ride.entity.ride.Ride.Builder(other);
    }
  }

  /**
   * RecordBuilder for Ride instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Ride>
    implements org.apache.avro.data.RecordBuilder<Ride> {

    private long id;
    private long passengerId;
    private long driverId;
    private java.lang.CharSequence pickupLocation;
    private java.lang.CharSequence dropOffLocation;
    private com.prac.ride.entity.ride.RideStatus status;
    private java.lang.CharSequence requestTime;
    private java.lang.CharSequence startTime;
    private java.lang.CharSequence endTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.prac.ride.entity.ride.Ride.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[1].schema(), other.passengerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.driverId)) {
        this.driverId = data().deepCopy(fields()[2].schema(), other.driverId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pickupLocation)) {
        this.pickupLocation = data().deepCopy(fields()[3].schema(), other.pickupLocation);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dropOffLocation)) {
        this.dropOffLocation = data().deepCopy(fields()[4].schema(), other.dropOffLocation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.requestTime)) {
        this.requestTime = data().deepCopy(fields()[6].schema(), other.requestTime);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.startTime)) {
        this.startTime = data().deepCopy(fields()[7].schema(), other.startTime);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.endTime)) {
        this.endTime = data().deepCopy(fields()[8].schema(), other.endTime);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Ride instance
     * @param other The existing instance to copy.
     */
    private Builder(com.prac.ride.entity.ride.Ride other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.passengerId)) {
        this.passengerId = data().deepCopy(fields()[1].schema(), other.passengerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.driverId)) {
        this.driverId = data().deepCopy(fields()[2].schema(), other.driverId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pickupLocation)) {
        this.pickupLocation = data().deepCopy(fields()[3].schema(), other.pickupLocation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dropOffLocation)) {
        this.dropOffLocation = data().deepCopy(fields()[4].schema(), other.dropOffLocation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.requestTime)) {
        this.requestTime = data().deepCopy(fields()[6].schema(), other.requestTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.startTime)) {
        this.startTime = data().deepCopy(fields()[7].schema(), other.startTime);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.endTime)) {
        this.endTime = data().deepCopy(fields()[8].schema(), other.endTime);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'passengerId' field.
      * @return The value.
      */
    public long getPassengerId() {
      return passengerId;
    }


    /**
      * Sets the value of the 'passengerId' field.
      * @param value The value of 'passengerId'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setPassengerId(long value) {
      validate(fields()[1], value);
      this.passengerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'passengerId' field has been set.
      * @return True if the 'passengerId' field has been set, false otherwise.
      */
    public boolean hasPassengerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'passengerId' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearPassengerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'driverId' field.
      * @return The value.
      */
    public long getDriverId() {
      return driverId;
    }


    /**
      * Sets the value of the 'driverId' field.
      * @param value The value of 'driverId'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setDriverId(long value) {
      validate(fields()[2], value);
      this.driverId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'driverId' field has been set.
      * @return True if the 'driverId' field has been set, false otherwise.
      */
    public boolean hasDriverId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'driverId' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearDriverId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pickupLocation' field.
      * @return The value.
      */
    public java.lang.CharSequence getPickupLocation() {
      return pickupLocation;
    }


    /**
      * Sets the value of the 'pickupLocation' field.
      * @param value The value of 'pickupLocation'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setPickupLocation(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.pickupLocation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pickupLocation' field has been set.
      * @return True if the 'pickupLocation' field has been set, false otherwise.
      */
    public boolean hasPickupLocation() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pickupLocation' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearPickupLocation() {
      pickupLocation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dropOffLocation' field.
      * @return The value.
      */
    public java.lang.CharSequence getDropOffLocation() {
      return dropOffLocation;
    }


    /**
      * Sets the value of the 'dropOffLocation' field.
      * @param value The value of 'dropOffLocation'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setDropOffLocation(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.dropOffLocation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dropOffLocation' field has been set.
      * @return True if the 'dropOffLocation' field has been set, false otherwise.
      */
    public boolean hasDropOffLocation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dropOffLocation' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearDropOffLocation() {
      dropOffLocation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.prac.ride.entity.ride.RideStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setStatus(com.prac.ride.entity.ride.RideStatus value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getRequestTime() {
      return requestTime;
    }


    /**
      * Sets the value of the 'requestTime' field.
      * @param value The value of 'requestTime'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setRequestTime(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.requestTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'requestTime' field has been set.
      * @return True if the 'requestTime' field has been set, false otherwise.
      */
    public boolean hasRequestTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'requestTime' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearRequestTime() {
      requestTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getStartTime() {
      return startTime;
    }


    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setStartTime(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.startTime = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearStartTime() {
      startTime = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getEndTime() {
      return endTime;
    }


    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder setEndTime(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.endTime = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.prac.ride.entity.ride.Ride.Builder clearEndTime() {
      endTime = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Ride build() {
      try {
        Ride record = new Ride();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.passengerId = fieldSetFlags()[1] ? this.passengerId : (java.lang.Long) defaultValue(fields()[1]);
        record.driverId = fieldSetFlags()[2] ? this.driverId : (java.lang.Long) defaultValue(fields()[2]);
        record.pickupLocation = fieldSetFlags()[3] ? this.pickupLocation : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.dropOffLocation = fieldSetFlags()[4] ? this.dropOffLocation : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (com.prac.ride.entity.ride.RideStatus) defaultValue(fields()[5]);
        record.requestTime = fieldSetFlags()[6] ? this.requestTime : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.startTime = fieldSetFlags()[7] ? this.startTime : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.endTime = fieldSetFlags()[8] ? this.endTime : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Ride>
    WRITER$ = (org.apache.avro.io.DatumWriter<Ride>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Ride>
    READER$ = (org.apache.avro.io.DatumReader<Ride>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeLong(this.passengerId);

    out.writeLong(this.driverId);

    out.writeString(this.pickupLocation);

    out.writeString(this.dropOffLocation);

    out.writeEnum(this.status.ordinal());

    out.writeString(this.requestTime);

    out.writeString(this.startTime);

    out.writeString(this.endTime);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.passengerId = in.readLong();

      this.driverId = in.readLong();

      this.pickupLocation = in.readString(this.pickupLocation instanceof Utf8 ? (Utf8)this.pickupLocation : null);

      this.dropOffLocation = in.readString(this.dropOffLocation instanceof Utf8 ? (Utf8)this.dropOffLocation : null);

      this.status = com.prac.ride.entity.ride.RideStatus.values()[in.readEnum()];

      this.requestTime = in.readString(this.requestTime instanceof Utf8 ? (Utf8)this.requestTime : null);

      this.startTime = in.readString(this.startTime instanceof Utf8 ? (Utf8)this.startTime : null);

      this.endTime = in.readString(this.endTime instanceof Utf8 ? (Utf8)this.endTime : null);

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.passengerId = in.readLong();
          break;

        case 2:
          this.driverId = in.readLong();
          break;

        case 3:
          this.pickupLocation = in.readString(this.pickupLocation instanceof Utf8 ? (Utf8)this.pickupLocation : null);
          break;

        case 4:
          this.dropOffLocation = in.readString(this.dropOffLocation instanceof Utf8 ? (Utf8)this.dropOffLocation : null);
          break;

        case 5:
          this.status = com.prac.ride.entity.ride.RideStatus.values()[in.readEnum()];
          break;

        case 6:
          this.requestTime = in.readString(this.requestTime instanceof Utf8 ? (Utf8)this.requestTime : null);
          break;

        case 7:
          this.startTime = in.readString(this.startTime instanceof Utf8 ? (Utf8)this.startTime : null);
          break;

        case 8:
          this.endTime = in.readString(this.endTime instanceof Utf8 ? (Utf8)this.endTime : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










